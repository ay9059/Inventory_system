//Inventory.c implements an interactive inventory system for a company 
//that makes assemblies from parts and sells them to a customer. The 
//system also keeps track of the parts which were used to manufacture 
//the products. The program also allows to restock when items are too 
//low and reporting the state of inventory.
//
//@author: Abhishek Yadav <ay9059@rit.edu>

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include <stddef.h>
#include "trimit.h"
#include "inventory.h"
/*
struct part{
   char id[12];
   struct part * next;
}

struct item{
   char id[12];  //max 11 plus null terminator
   int quantity;
   struct item * next;

}

struct items_needed{
   struct item * items_list;
   int item_count;

}

struct assembly{
   char id[12];
   int capacity;
   int on_hand;
   struct items_needed * items;
   struct assembly * next;

}

struct inventory{
   struct part * part_list;
   int part_count;
   struct assembly * assembly_list;
   int assembly_count;




}
*/
//Adds a part to the inventory 
//@param (inventory_t) p: refers to the inventory where the part
//                        is to be added
//@param (char *) id: the id of the part 
//@return: void
void add_part(inventory_t * p,char * id){
   if(( id[0]=='P' || id[0]=='p') && (int) strlen(id)<=11  ){
      part_t new_part; //malloc(sizeof(part_t));
      new_part.id=strcpy(new_part.id,id);
      p->part_count++;
      int already=0;
     // new_part->next = malloc(sizeof(part_t));
      part_t * iterator = p->part_list;

	     
	  // printf("true\n");
	
      while(iterator!=NULL){

         printf("got hereeeee\n");	 
         iterator= iterator->next;
         if(strcmp(iterator->id,id)==0){
       	    already=1;
            printf("got here\n");	 
	 }
			 
	
		 
			 
      }
      if(already!=1){

        iterator = *new_part;
	
      }else{
         fprintf(stderr,"!!! Part already in inventory\n");
      
      }
      printf("+ addPart %s\n" , id);
}else if((int) strlen(id)>11){
   fprintf(stderr,"!!!  id is greater than 11\n");

}


else {
   fprintf(stderr, "!!! %s: part ID, must start with \'P\' \n",id );


}
}

void add_assembly(inventory_t * invp, char * id, int capacity, items_needed_t * items){
   if(( id[0]=='A' || id[0]=='a') && (int) strlen(id) <=11 ){
      assembly_t * new_assembly = malloc(sizeof(assembly_t));
      strcpy(new_assembly->id,id);
      int already=0;
      if(capacity <0){
         fprintf(stderr,"!!! Invalid capacity size/\n");
         exit(EXIT_FAILURE);
   
      }
      new_assembly->on_hand=0;
      new_assembly->capacity = capacity;
      new_assembly->items = items;
      assembly_t * iterator = invp->assembly_list;

     while(iterator != NULL){
        iterator= iterator->next;
        if(strcmp(iterator->id,id)==0){
	   already=1;
	
	}
     } 
      if(already==0){
         iterator = new_assembly;
      
      printf("+ addAssembly %s\n" , id);
      }else{
         fprintf(stderr,"!!! assembly already exists in inventory\n");
      
      }


}else if((int) strlen(id)>11){

   fprintf(stderr,"!!!  id is greater than 11\n");

}

else{
  fprintf(stderr,"!!! %s assembly id must start with \'A\'\n ",id );

}

}

void make(inventory_t * invp, char * id,int n,items_needed_t * parts){
   if(n<=0){
      

   
   }else{
  //  assembly_t * assembly_iterator =  invp->assembly_list;
    assembly_t * assembly_object = invp->assembly_list;
    while(!strcmp(assembly_object->id,id)==0){
       assembly_object=assembly_object->next;
    }
    item_t * item_pointer = assembly_object->items->item_list;

    printf("Make %d units of %s",(int) n, (char *) id);
       while(item_pointer!=NULL){
       if(item_pointer->id[0]=='P'){
	  
	 // char * xi=assembly_iterator->id;
          add_item(parts,item_pointer->id ,assembly_object->on_hand*n);
       
       }else{
           get(invp,item_pointer->id,assembly_object->on_hand*n,parts);
       
       
       }
       item_pointer = item_pointer->next;
    
    }
   
}
}


void add_item(items_needed_t * items, char *id, int quantity){
    item_t * item_iterator = items->item_list;
    int added=0;
    while(item_iterator->id!=NULL){
       if(strcmp(item_iterator->id,id)==0){
          item_iterator->quantity=quantity;
	  added=1;
       }

      // items->item=items->item->next;
    
   item_iterator = item_iterator->next; 
    }
  // item= items->item_list->next;



//if the part is not found, add it to the end.
   if(!added){
       item_t * new = malloc(sizeof(item_t));
       strcpy(new->id,id);
       new->quantity=quantity;

       item_iterator=new;
}
}

// part * lookup_part(part_t * pp, char * id){



void get(inventory_t * invp, char * id, int n, items_needed_t * parts){
   if (n<=0){
   
   } 
    else{
    
    
    assembly_t * assembly_object = invp->assembly_list;

    while(!strcmp(assembly_object->id,id)==0){
       assembly_object=assembly_object->next;
    }

    if(assembly_object->on_hand>=n){
       assembly_object->on_hand-=n;

       
    }else{
       make(invp,id,n,parts);
       assembly_object->on_hand=0;
    
    }
}
}


void print_parts(inventory_t * invp){
   printf("Part inventory:\n");
   printf("---------------\n");
   printf("Part ID\n");
   printf("===========");
   part_t * part_iterator = invp->part_list;

   while(1){
      printf("got here");
      printf("%s\n",part_iterator->id);
      part_iterator= part_iterator->next;  
   
      if(part_iterator==NULL){
         break;
      }  
   }


}

void read_input(FILE *fp, inventory_t * invp) {

   
    char buf[120];
	
    while(fgets(buf,120,fp)){
     char *token = strtok(trim(buf)," ");
     if(strcmp(token ,"addPart")==0 ){
     char * second = strtok(NULL," ");
     add_part(invp, second);			     
     }
     
     else if(strcmp(token,"addAssembly")==0) {
        char * id = strtok(NULL," ");
        char * capacity_i =  strtok(NULL, " ");
	int capacity_c = strtol(capacity_i,NULL,10);
        items_needed_t * items = malloc(sizeof(items_needed_t));
        add_assembly(invp, id, capacity_c, items);
	     
     }else if(strcmp(token,"parts")==0){
        printf("+ parts\n");
        print_parts(invp);
     
     
     }
     
     
     else{
       fprintf(stderr,"!!! Invalid request\n");
     
     }

}
}

int main(int argc, char * argv[]){
 
   
   inventory_t * invp = malloc(sizeof(inventory_t));
   
  
    if(argc==1 ){
        FILE * fp = stdin;
	read_input(fp,invp );
			  
   }else if(argc==2){
      printf("Arg 2 read \n");
      FILE * fp = fopen(argv[1], "r" );
      read_input(fp, invp);
   
   } 
return 1;


}
